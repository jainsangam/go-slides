Go Basics
03 Sep 2017

Anuj Agrawal
Sangam Kumar Jain


* packages & import

- every go program is made up of packages
- programs start running in package main ( function main() )
- by convention, the package name is the same as the last element of the import path
- for instance, the "fmt" packages comprises of files that starts with package "fmt"

.code /code/package/basic.go

- public variables & functions of a package should start with capital case character ( for e.g:  _Println_ in _fmt_ package )

* code organization

- all go codes are typically kept in a single workspace.
- a workspace contains many repositories from different vcs ( e.g.: git )
- each repository contains one or more packages.
- the path to a package's directory determines its import path.

- a workspace is a directory hierarchy with three directories at its root:

  src contains go source files,
  pkg contains package objects, and
  bin contains executable commands.

- the go tool builds source packages and installs the resulting binaries to the pkg and bin directories.
- the src subdirectory typically contains multiple version control repositories (such as for git or mercurial).

*
    bin/
        hello                          # command executable
        outyet                         # command executable
    pkg/
        linux_amd64/
            github.com/golang/example/
                stringutil.a           # package object
    src/
        github.com/golang/example/
            .git/                      # git repository metadata
        hello/
            hello.go               # command source
        outyet/
            main.go                # command source
            main_test.go           # test source
        stringutil/
            reverse.go             # package source
            reverse_test.go        # test source
        golang.org/x/image/
            .git/                      # git repository metadata
        bmp/
            reader.go              # package source
            writer.go              # package source
        ... (many more repositories and packages omitted) ...

* build & installation

- the GOPATH environment variable specifies the location of your workspace.
- an import path is a string that uniquely identifies a package. a package's import path corresponds to its location inside a workspace or in a remote repository
- the packages from the standard library are given short import paths such as "fmt" and "net/http".
- we should select a base path that is unlikely to collide with future additions to the standard library or other external libraries.
- if you keep your code in a source repository somewhere, then you should use the root of that source repository as your base path. for instance, if you have a github account at github.com/user, that should be your base path.

*
- to compile and run a simple program, first choose a package path (we'll use github.com/user/hello) and create a corresponding package directory inside your workspace:
  $ mkdir $GOPATH/src/github.com/user/hello

- create a file named hello.go inside that directory, containing the following Go code.

.code /code/package/basic.go

- now you can build and install that program with the go tool:
  $ go install github.com/user/hello

*
- this command builds the hello command, producing an executable binary. it then installs that binary to the workspace's bin directory as hello (or, under windows, hello.exe). in our example, that will be $gopath/bin/hello, which is $home/go/bin/hello.
- you can now run the program by typing its full path at the command line:


* variable & function

* flow control if..else ,for , switch & defer

* more Type structs, slices and maps

* resources

- https://golang.org/doc/install
- https://golang.org/doc/code.html
- https://tour.golang.org